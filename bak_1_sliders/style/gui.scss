/* stylelint-disable no-descending-specificity */

@use 'sass:list';
@use 'sass:math';

:root {
  --l: 0;
  --c: 0;
  --h: 0;
}

.lch-slider {
  $width: 21.25rem;
  $height: 2.5rem;
  $border-thickness: 0.0625rem;
  $thumb-size: 1.75rem;
  $chroma-limit: 0.4;
  $l-resolution: 60;
  $c-resolution: 60;
  $h-resolution: 60;

  position: relative;
  width: $width;
  height: $height;
  margin-block: 48px;
  border: $border-thickness solid rgb(0 0 0);

  &--val {
    &-l {
      $gradient-steps: ();
      @for $cnt from 0 through $l-resolution {
        $l: $cnt * math.div(1, $l-resolution);
        $gradient-steps: list.join(
          $gradient-steps,
          oklch($l var(--c) calc(var(--h) * 1deg)),
          $separator: comma
        );
      }

      background-image: linear-gradient(to right, $gradient-steps);
    }

    &-c {
      $gradient-steps: ();
      @for $cnt from 0 through $c-resolution {
        $c: $cnt * math.div($chroma-limit, $c-resolution);
        $gradient-steps: list.join(
          $gradient-steps,
          oklch(var(--l) $c calc(var(--h) * 1deg)),
          $separator: comma
        );
      }

      background-image: linear-gradient(to right, $gradient-steps);
    }

    &-h {
      $gradient-steps: ();
      @for $cnt from 0 through $h-resolution {
        $h: $cnt * math.div(360, $h-resolution);
        $gradient-steps: list.join(
          $gradient-steps,
          oklch(var(--l) var(--c) #{$h}deg),
          $separator: comma
        );
      }

      background-image: linear-gradient(to right, $gradient-steps);
    }
  }

  &__input {
    position: absolute;
    top: calc(-1 * $border-thickness);
    left: calc(-0.5 * $thumb-size);
    width: calc(100% + $thumb-size);
    height: calc(100% + 2 * $border-thickness);
    margin: 0;
    appearance: none;
    cursor: pointer;
    background: transparent;

    @mixin track() {
      height: $height;
      border-radius: 0;
    }

    @mixin thumb() {
      $height-unitless: math.div($height, 1rem);
      $thumb-size-unitless: math.div($thumb-size, 1rem);
      $translate: math.sqrt(
          math.pow(($height-unitless - 0.5 * $thumb-size-unitless), 2) * 0.5
        ) * 1rem;

      width: $thumb-size;
      height: $thumb-size;
      appearance: none;
      cursor: grab;
      background-color: oklch(var(--l) var(--c) calc(var(--h) * 1deg));
      border: 4px solid #fff;
      transform: rotate(45deg) translate($translate, $translate);
    }

    &:focus {
      outline: none;
    }

    &::-webkit-slider {
      &-runnable-track {
        @include track;
      }

      &-thumb {
        @include thumb;
      }
    }

    &::-moz-range {
      &-track {
        @include track;
      }

      &-thumb {
        @include thumb;
      }
    }
  }
}
